substitutions:
  name: twk-blastgate-brainbox
  friendly_name: TWK Blast Gate 

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false

  project:
    name: twk.BlastGates
    version: dev

esp8266:
  board: nodemcuv2

output:
  # up = forward, down = backwards
- platform: gpio
  pin: GPIO0
  id: direction_pin

- platform: esp8266_pwm
  pin: GPIO5
  id: speed_pin

globals:
  - id: gateopen
    type: int
    initial_value: '0'

binary_sensor:
  - platform: gpio
    pin: GPIO15
    id: limit_open

  - platform: gpio
    pin: GPIO13
    id: limit_closed


script:
  - id: script_open_gate
    then:
      - output.turn_on: direction_pin
      - output.set_level:
          id: speed_pin
          level: 100%
      - wait_until:
          condition:
            # check if the gate is closed, if so, turn off
            lambda : |-
              if (id(limit_open).state == 0)
                return false;
              return true; 
      - output.turn_off: speed_pin
      - lambda : |-
          id(gateopen) = 1;
          id(gate_control_oc).publish_state(true);
    
  - id: script_close_gate
    then:
      - output.turn_off: direction_pin
      - output.set_level:
          id: speed_pin
          level: 100%
      - wait_until:
          condition:
            # check if the gate is closed, if so, turn off
            lambda : |-
              if (id(limit_closed).state == 0)
                return false;
              return true; 
      - output.turn_off: speed_pin
      - lambda : |-
          id(gateopen) = 0;
          id(gate_control_oc).publish_state(false);

switch:
  - platform: template
    name: Gate Control Open Close
    id: gate_control_oc
    restore_mode: DISABLED
    lambda: |-
      if (id(gateopen) == 1) {
        return true;
      } else { 
        return false;
      }

    turn_on_action: 
      - script.execute: script_open_gate
      - globals.set:
          id: gateopen
          value: '1'

    turn_off_action: 
      - script.execute: script_close_gate
      - globals.set:
          id: gateopen
          value: '0'



# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  # Set up a wifi access point
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

# To have a "next url" for improv serial
web_server:
